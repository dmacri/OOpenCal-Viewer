cmake_minimum_required(VERSION 3.10)

project(QtVtkViewer)

set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# ============================================
# Sources and resources
# ============================================
file(GLOB_RECURSE Headers *.h *.hpp)
file(GLOB Sources *.cpp)
list(APPEND Sources
    config/Config.cpp
    config/ConfigCategory.cpp
    visualiser/SettingParameter.cpp
    visualiser/VideoExporter.cpp
    visualiser/Visualiser.cpp
    visualiserProxy/SceneWidgetVisualizerFactory.cpp
    widgets/ClickableLabel.cpp
    widgets/ConfigDetailsDialog.cpp
    widgets/SceneWidget.cpp
    widgets/ColorSettingsDialog.cpp
    widgets/ColorSettings.cpp
)
file(GLOB Resources *.qrc)
file(GLOB Styles *.qss)
file(GLOB UIs *.ui)
file(GLOB_RECURSE Docs *.md)


# ============================================
# Qt setup
# ============================================
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR "YES")
set(CMAKE_AUTOMOC "YES")
set(CMAKE_AUTOUIC "YES")


# ============================================
# VTK dependencies
# ============================================
find_package(VTK COMPONENTS
    CommonColor
    CommonCore
    CommonDataModel
    FiltersSources
    InteractionStyle
    RenderingContextOpenGL2
    RenderingCore
    RenderingFreeType
    RenderingGL2PSOpenGL2
    RenderingOpenGL2
    IOXML
    IOOggTheora
    REQUIRED
        GUISupportQt
        IOLegacy
)

# ============================================
# Executable target
# ============================================
add_executable(${PROJECT_NAME} MACOSX_BUNDLE
    ${Sources} ${Headers} ${Resources} ${UIs} ${Styles} ${Docs} LICENSE .github/workflows/release--deb-package--ubuntu24.04.yml
)


# ============================================
# OOpenCAL include directory (optional)
# ============================================
set(OOPENCAL_DIR "/home/dmacri80/Progetto-Visualizer/" CACHE PATH "Path to the base directory of OOpenCAL sources")

if(OOPENCAL_DIR)
    message(STATUS "Using OOpenCAL directory: ${OOPENCAL_DIR}")
    target_include_directories(${PROJECT_NAME} PRIVATE
        ${OOPENCAL_DIR}
        ${OOPENCAL_DIR}/OOpenCAL
    )
else()
    message(WARNING "OOPENCAL_DIR not set! Includes like <OOpenCAL/...> may not work.")
endif()


# ============================================
# inih library (manual integration)
# ============================================
# NOTE:
# The inih library does not provide a CMake build system.
# It only contains sources and a Meson build definition.
# Therefore we must manually add the relevant .c/.cpp files
# and include directories here.
#
# Sources:
#   - ini.c / ini.h   (C parser)
#   - cpp/INIReader.* (C++ wrapper)
#
# We fetch the repository using FetchContent and then
# register its sources into our target manually.
include(FetchContent)

FetchContent_Declare(
    inih
    GIT_REPOSITORY https://github.com/benhoyt/inih.git
    GIT_TAG        master
)

FetchContent_MakeAvailable(inih)

FetchContent_GetProperties(inih)
if(inih_SOURCE_DIR)
    target_sources(${PROJECT_NAME} PRIVATE
        ${inih_SOURCE_DIR}/ini.c
        ${inih_SOURCE_DIR}/cpp/INIReader.cpp
    )
    target_include_directories(${PROJECT_NAME} PRIVATE
        ${inih_SOURCE_DIR}
        ${inih_SOURCE_DIR}/cpp
    )
endif()


# ============================================
# Linking
# ============================================
target_link_libraries(${PROJECT_NAME} PRIVATE ${VTK_LIBRARIES})
#target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets Qt5::OpenGL VTK::GUISupportQt VTK::IOLegacy)

vtk_module_autoinit(
    TARGETS ${PROJECT_NAME}
    MODULES VTK::GUISupportQt VTK::IOLegacy
)

# ============================================
# Doxygen Documentation (optional)
# ============================================
find_package(Doxygen)

if(DOXYGEN_FOUND)
    find_program(DOT_PROGRAM dot)           # graphviz (dot) - optional

    set(DOXYGEN_INPUT_DIR "${CMAKE_SOURCE_DIR}")
    set(DOXYGEN_OUTPUT_DIR "${CMAKE_BINARY_DIR}/docs")
    set(PROJECT_BRIEF "${PROJECT_NAME} documentation generated by Doxygen")

    set(DOXYFILE_DIR "${CMAKE_SOURCE_DIR}/doc")
    set(DOXYFILE_IN "${DOXYFILE_DIR}/Doxyfile.in")
    set(DOXYFILE_OUT "${CMAKE_BINARY_DIR}/Doxyfile")

if(EXISTS "${DOXYFILE_IN}")
        if(DOT_PROGRAM)
            set(HAVE_DOT "YES")
        else()
            set(HAVE_DOT "NO")
        endif()

        configure_file(${DOXYFILE_IN} ${DOXYFILE_OUT} @ONLY)

        add_custom_target(docs
            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE_OUT}
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
            COMMENT "Generating Doxygen documentation (HTML only)..."
            VERBATIM
        )

        message(STATUS "Doxygen found: ${DOXYGEN_EXECUTABLE}")
        message(STATUS "Docs will be generated at: ${DOXYGEN_OUTPUT_DIR} (HTML)")
        if(DOT_PROGRAM)
            message(STATUS "Graphviz (dot) found: ${DOT_PROGRAM} (class diagrams enabled)")
        else()
            message(STATUS "Graphviz (dot) not found: class diagrams disabled")
        endif()
    else()
        message(WARNING "Doxyfile.in not found in ${DOXYFILE_DIR}. Skipping docs target.")
    endif()
else()
    message(STATUS "Doxygen not found. Skipping docs target.")
endif()

# ============================================
# Development tools: Sanitizers, IWYU, compile_commands
# ============================================

# Export compile_commands.json for tooling (clang-tidy, cppcheck, IWYU, etc.)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable sanitizers on non-Windows with GCC/Clang
if (NOT CMAKE_SYSTEM_NAME MATCHES "Windows" AND CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    include(CheckLibraryExists)

    check_library_exists(asan __asan_init "" HAVE_LIBASAN)
    check_library_exists(ubsan __ubsan_handle_add_overflow "" HAVE_LIBUBSAN)

    if (HAVE_LIBASAN AND HAVE_LIBUBSAN)
        message(STATUS "Sanitizers available: enabling AddressSanitizer and UndefinedBehaviorSanitizer")
        set(SANITIZER_FLAGS "-fsanitize=address,undefined -fno-omit-frame-pointer")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SANITIZER_FLAGS}")
        set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} ${SANITIZER_FLAGS}")
    else()
        message(WARNING "Sanitizers requested but libasan/libubsan not available on this system")
    endif()
endif()

# include-what-you-use (IWYU)
find_program(IWYU_PATH NAMES include-what-you-use iwyu)

if (IWYU_PATH)
    message(STATUS "Found include-what-you-use: ${IWYU_PATH}")
    # Basic activation without mapping file
    set(CMAKE_CXX_INCLUDE_WHAT_YOU_USE ${IWYU_PATH})
else()
    message(WARNING "include-what-you-use not found. Consider installing it for header optimization.")
endif()
