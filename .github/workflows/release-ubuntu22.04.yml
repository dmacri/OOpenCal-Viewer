name: Build Qt-VTK-viewer (Qt6 + VTK, AppImage + deb) [on push and release]

on:
  push:
    branches:
      - '**'
  release:
    types: [created]

env:
  PROJECT_NAME: QtVtkViewer

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      ################### checkout & dependencies
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Checkout OOpenCAL dependency
        uses: actions/checkout@v3
        with:
          repository: alessioderango/OOpenCAL
          path: deps/OOpenCAL
          token: ${{ secrets.VisualizerOpenCal }}

      - name: Install dependencies (Qt6, VTK, build tools)
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            cmake \
            qt6-base-dev \
            qt6-tools-dev \
            qt6-tools-dev-tools \
            libvtk9-dev \
            libvtk9-qt-dev \
            debhelper \
            dpkg-dev \
            fakeroot \
            libfuse2 \
            wget \
            software-properties-common

      - name: Install GCC 13
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y gcc-13 g++-13
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 \
                                   --slave /usr/bin/g++ g++ /usr/bin/g++-13

      ################### building application
      - name: Prepare application icon
        run: |
          mkdir -p resources/icons
          cp icons/application.png resources/icons/${PROJECT_NAME}.png || true

      - name: Create .desktop file
        run: |
          echo "[Desktop Entry]
          Name=${PROJECT_NAME}
          Exec=${PROJECT_NAME}
          Icon=${PROJECT_NAME}
          Type=Application
          Categories=Utility;Science;" > ${PROJECT_NAME}.desktop

      - name: Build application
        run: |
          mkdir -p build
          cd build
          cmake .. -DOOPENCAL_DIR=${{ github.workspace }}/deps
          cmake --build . --parallel

      - name: Listing dependencies to shared libraries
        run: |
          echo "ldd of built binary:"
          ldd build/${PROJECT_NAME} || true

      ################### building deb with VTK copying
      - name: Build .deb package with bundled VTK libs
        run: |
          set -euo pipefail
          PKG_DIR="debian/${PROJECT_NAME}"

          mkdir -p "${PKG_DIR}/usr/bin"
          mkdir -p "${PKG_DIR}/usr/share/applications"
          mkdir -p "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps"
          mkdir -p "${PKG_DIR}/usr/lib/${PROJECT_NAME}"
          mkdir -p "${PKG_DIR}/DEBIAN"

          # Copy binary
          cp build/${PROJECT_NAME} "${PKG_DIR}/usr/bin/${PROJECT_NAME}.real"
          chmod +x "${PKG_DIR}/usr/bin/${PROJECT_NAME}.real"

          ### WRAPPER to load bundled libs
          echo "#!/bin/bash
          export LD_LIBRARY_PATH=/usr/lib/${PROJECT_NAME}:\$LD_LIBRARY_PATH
          exec /usr/bin/${PROJECT_NAME}.real \"\$@\"" > "${PKG_DIR}/usr/bin/${PROJECT_NAME}"
          chmod +x "${PKG_DIR}/usr/bin/${PROJECT_NAME}"

          # Copy desktop & icon
          cp ${PROJECT_NAME}.desktop "${PKG_DIR}/usr/share/applications/" || true
          cp resources/icons/${PROJECT_NAME}.png "${PKG_DIR}/usr/share/icons/hicolor/256x256/apps/${PROJECT_NAME}.png" || true

          ### VTK LIB COPY SECTION
          echo "Copying VTK libs detected by ldd..."
          for lib in $(ldd build/${PROJECT_NAME} | grep "libvtk" | awk '{print $3}' | grep -E "^/"); do
            echo "Including: $lib"
            cp "$lib" "${PKG_DIR}/usr/lib/${PROJECT_NAME}/"
          done

          # Version
          if [[ "${GITHUB_REF_TYPE:-}" == "tag" ]]; then
            VERSION="$(echo "${GITHUB_REF_NAME}" | sed 's/^v//')"
          else
            VERSION="0.0.1+git"
          fi

          # Control file
          printf "%s\n" \
            "Package: ${PROJECT_NAME}" \
            "Version: ${VERSION}" \
            "Section: science" \
            "Priority: optional" \
            "Architecture: amd64" \
            "Maintainer: YourName <your@email>" \
            "Depends: libc6, libstdc++6" \
            "Description: ${PROJECT_NAME} - Qt + VTK scientific viewer (bundled VTK)" \
            > "${PKG_DIR}/DEBIAN/control"

          dpkg-deb --build "${PKG_DIR}" "${PROJECT_NAME}.deb"

      ################### AppImage
      - name: Move desktop and icon into build dir
        run: |
          cp ${PROJECT_NAME}.desktop build/ || true
          cp resources/icons/${PROJECT_NAME}.png build/ || true

      - name: Download linuxdeployqt
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod +x linuxdeployqt-continuous-x86_64.AppImage

      - name: Run linuxdeployqt (create AppImage)
        run: |
          export PATH=/usr/lib/qt6/bin:$PATH
          ./linuxdeployqt-continuous-x86_64.AppImage build/${PROJECT_NAME}.desktop \
            -appimage \
            -bundle-non-qt-libs

      - name: Rename AppImage
        run: |
          APPIMAGE=$(ls *.AppImage | head -n 1)
          mv "$APPIMAGE" ${PROJECT_NAME}-x86_64.AppImage || true

      ################### artifacts
      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-deb
          path: ${{ env.PROJECT_NAME }}.deb

      - name: Upload AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-AppImage
          path: ${{ env.PROJECT_NAME }}-x86_64.AppImage

      ################### release upload
      - name: Upload .deb to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PROJECT_NAME }}.deb

      - name: Upload AppImage to GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PROJECT_NAME }}-x86_64.AppImage
